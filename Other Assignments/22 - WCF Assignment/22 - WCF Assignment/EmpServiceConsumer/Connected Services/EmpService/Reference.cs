//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmpServiceConsumer.EmpService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/EmployeeService")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Dept {
            get {
                return this.DeptField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptField, value) != true)) {
                    this.DeptField = value;
                    this.RaisePropertyChanged("Dept");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpNumber {
            get {
                return this.EmpNumberField;
            }
            set {
                if ((this.EmpNumberField.Equals(value) != true)) {
                    this.EmpNumberField = value;
                    this.RaisePropertyChanged("EmpNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmpService.IEmployeeService")]
    public interface IEmployeeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeService/AddEmployeeResponse")]
        bool AddEmployee(EmpServiceConsumer.EmpService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/AddEmployee", ReplyAction="http://tempuri.org/IEmployeeService/AddEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddEmployeeAsync(EmpServiceConsumer.EmpService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetreiveEmployees", ReplyAction="http://tempuri.org/IEmployeeService/RetreiveEmployeesResponse")]
        System.Collections.Generic.List<EmpServiceConsumer.EmpService.Employee> RetreiveEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetreiveEmployees", ReplyAction="http://tempuri.org/IEmployeeService/RetreiveEmployeesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<EmpServiceConsumer.EmpService.Employee>> RetreiveEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetreiveEmployeeByID", ReplyAction="http://tempuri.org/IEmployeeService/RetreiveEmployeeByIDResponse")]
        EmpServiceConsumer.EmpService.Employee RetreiveEmployeeByID(int empId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/RetreiveEmployeeByID", ReplyAction="http://tempuri.org/IEmployeeService/RetreiveEmployeeByIDResponse")]
        System.Threading.Tasks.Task<EmpServiceConsumer.EmpService.Employee> RetreiveEmployeeByIDAsync(int empId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmployeeService/UpdateEmployeeResponse")]
        bool UpdateEmployee(EmpServiceConsumer.EmpService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmployeeService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(EmpServiceConsumer.EmpService.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmployeeService/DeleteEmployeeResponse")]
        bool DeleteEmployee(int empId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmployeeService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int empId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeServiceChannel : EmpServiceConsumer.EmpService.IEmployeeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeServiceClient : System.ServiceModel.ClientBase<EmpServiceConsumer.EmpService.IEmployeeService>, EmpServiceConsumer.EmpService.IEmployeeService {
        
        public EmployeeServiceClient() {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddEmployee(EmpServiceConsumer.EmpService.Employee emp) {
            return base.Channel.AddEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> AddEmployeeAsync(EmpServiceConsumer.EmpService.Employee emp) {
            return base.Channel.AddEmployeeAsync(emp);
        }
        
        public System.Collections.Generic.List<EmpServiceConsumer.EmpService.Employee> RetreiveEmployees() {
            return base.Channel.RetreiveEmployees();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<EmpServiceConsumer.EmpService.Employee>> RetreiveEmployeesAsync() {
            return base.Channel.RetreiveEmployeesAsync();
        }
        
        public EmpServiceConsumer.EmpService.Employee RetreiveEmployeeByID(int empId) {
            return base.Channel.RetreiveEmployeeByID(empId);
        }
        
        public System.Threading.Tasks.Task<EmpServiceConsumer.EmpService.Employee> RetreiveEmployeeByIDAsync(int empId) {
            return base.Channel.RetreiveEmployeeByIDAsync(empId);
        }
        
        public bool UpdateEmployee(EmpServiceConsumer.EmpService.Employee emp) {
            return base.Channel.UpdateEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(EmpServiceConsumer.EmpService.Employee emp) {
            return base.Channel.UpdateEmployeeAsync(emp);
        }
        
        public bool DeleteEmployee(int empId) {
            return base.Channel.DeleteEmployee(empId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int empId) {
            return base.Channel.DeleteEmployeeAsync(empId);
        }
    }
}
